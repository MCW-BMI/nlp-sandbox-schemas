openapi: 3.0.2
info:
  version: 0.1.6
  title: NLP Sandbox Physical Address Annotator API
  contact:
    name: The NLP Sandbox Team
    email: thomas.schaffter@sagebionetworks.org
    url: 'https://Sage-Bionetworks.github.io/nlp-sandbox-schemas'
  license:
    name: Apache 2.0
    url: 'https://github.com/Sage-Bionetworks/nlp-sandbox/blob/main/LICENSE'
  x-logo:
    url: 'https://Sage-Bionetworks.github.io/nlp-sandbox-schemas/logo.png'
  description: >
    The OpenAPI specification implemented by NLP Sandbox Physical Address
    Annotators.

    # Overview

    This NLP tool detects references of physical addresses in the clinical notes
    given as input and returns a list of physical address annotations.
tags:
  - name: Physical Address
    description: Operations about physical addresses
  - name: Health
    description: Operations about API health
  - name: Service
    description: Operations about NLP services
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  /physical-addresses:
    post:
      tags:
        - Physical Address
      summary: Get all physical address annotations
      description: Returns the physical address annotations
      operationId: physical_addresses.read_all
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhysicalAddressAnnotation'
        '403':
          description: Forbidden
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Note'
  /health:
    get:
      tags:
        - Health
      summary: Get Health
      description: Get the health of the API
      operationId: health
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /service:
    get:
      tags:
        - Service
      summary: Get service information
      description: Get information about the service
      operationId: service
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          type: string
          minLength: 4
          example: John78
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
      required:
        - username
        - firstName
        - lastName
        - email
    Entity:
      type: object
      properties:
        id:
          description: ID
          type: integer
          example: 0
        createdBy:
          description: The User who created this entity
          $ref: '#/components/schemas/User'
        createdAt:
          description: When the entity has been created
          type: string
          format: date-time
        updatedBy:
          description: The User who update this entity
          $ref: '#/components/schemas/User'
        updatedAt:
          description: When the entity has been updated
          type: string
          format: date-time
    Note:
      type: object
      description: A clinical note
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            text:
              description: The content of the note
              type: string
              example: 'On 09-03-1999, Ms Chloe Price met with Dr Joe.'
            type:
              description: The note type
              type: string
              enum:
                - pathology
                - phone_call
    Annotation:
      type: object
      description: An annotation in a text
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          properties:
            noteId:
              description: The note ID
              type: integer
            start:
              description: The position of the first character
              type: integer
            length:
              description: The length of the annotation
              type: integer
            text:
              description: The string annotated
              type: string
    PhysicalAddressAnnotation:
      type: object
      description: A physical address annotation in a text
      allOf:
        - $ref: '#/components/schemas/Annotation'
        - type: object
          properties:
            type:
              description: Type of address information
              type: string
              enum:
                - City
                - Country
                - Department
                - Hospital
                - Organization
                - Other
                - Room
                - State
                - Street
                - Zip
    Health:
      type: object
      properties:
        status:
          description: Health status
          type: string
          enum:
            - pass
            - warn
    Error:
      type: object
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    Service:
      type: object
      description: Information about an NLP service
      properties:
        name:
          description: The service name
          type: string
          minLength: 3
          maxLength: 60
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          example: awesome-date-annotator
        version:
          description: The version of the service (SemVer string)
          type: string
          minLength: 1
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          example: 1.0.0
        license:
          description: The license of this service (spdx.org/licenses Identifier)
          type: string
          example: Apache-2.0
        repository:
          description: The place where the code lives
          type: string
          example: 'github:awesome-org/awesome-date-annotator'
        description:
          description: 'A short, one-sentence summary of the service'
          type: string
          maxLength: 100
          example: An awesome Date Annotator based on regex patterns
        author:
          description: The author of the service
          type: string
          example: Example Author
        authorEmail:
          description: The email address of the author
          type: string
          format: email
          example: author@example.com
        url:
          description: The URL to the homepage of the service
          type: string
          format: uri
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
